{"version":3,"sources":["Card.tsx","projects.ts","theme.ts","App.tsx","index.tsx"],"names":["Project","props","Card","elevation","width","CardBody","Box","pad","top","horizontal","responsive","Grid","rows","columns","gap","areas","mobile","name","start","end","gridArea","Image","fit","imageFit","src","mediaLink","Heading","color","textColor","level","title","Paragraph","margin","message","CardFooter","Text","time","Button","href","projectLink","icon","Github","hoverIndicator","projects","mediaType","customTheme","deepFreeze","global","colors","brand","font","size","height","maxWidth","family","face","document","App","React","useState","darkMode","setDarkMode","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","Grommet","background","themeMode","theme","Main","align","direction","justify","animation","type","duration","checked","icons","unchecked","Star","onChange","getElementById","replace","primary","label","Avatar","Anchor","map","project","Footer","vertical","textAlign","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f6c9d1bc.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  Heading,\n  Grid,\n  Image,\n  Paragraph,\n  Text,\n} from \"grommet\";\n\nimport { Github } from \"grommet-icons\";\n\nexport type Props = {\n  title: string;\n  message: string;\n  time: string;\n  mediaLink: string;\n  mediaType: \"image\" | \"video\";\n  projectLink: string;\n  imageFit: \"cover\" | \"contain\";\n};\n\nexport type DecoratedProps = Props & { textColor: string; mobile: boolean };\n\nexport const Project = (props: DecoratedProps) => {\n  return (\n    <Card elevation=\"large\" width=\"large\">\n      <CardBody>\n        <Box pad={{ top: \"medium\", horizontal: \"medium\" }} responsive={true}>\n          <Grid\n            rows={[\"xxsmall\", \"small\"]}\n            columns={[\"small\", \"large\"]}\n            gap=\"small\"\n            areas={\n              !props.mobile\n                ? [\n                    { name: \"image\", start: [0, 0], end: [0, 1] },\n                    { name: \"title\", start: [1, 0], end: [1, 0] },\n                    { name: \"description\", start: [1, 1], end: [1, 1] },\n                  ]\n                : [\n                    { name: \"title\", start: [0, 0], end: [1, 0] },\n                    { name: \"description\", start: [0, 1], end: [1, 1] },\n                  ]\n            }\n          >\n            {\" \"}\n            {!props.mobile && (\n              <Box responsive={true} gridArea=\"image\">\n                <Image fit={props.imageFit} src={props.mediaLink} />\n              </Box>\n            )}\n            <Box responsive={true} gridArea=\"title\">\n              <Heading color={props.textColor} level=\"3\">\n                {props.title}\n              </Heading>\n            </Box>\n            <Box responsive={true} width=\"medium\" gridArea=\"description\">\n              <Paragraph color={props.textColor} margin={{ top: \"none\" }}>\n                {props.message}\n              </Paragraph>\n            </Box>\n          </Grid>\n        </Box>\n      </CardBody>\n      <CardFooter pad={{ horizontal: \"medium\" }}>\n        <Text color={props.textColor}>{props.time}</Text>\n        <Button\n          href={props.projectLink}\n          icon={<Github color={props.textColor} />}\n          hoverIndicator\n        />\n      </CardFooter>\n    </Card>\n  );\n};\n","import { Props } from \"./Card\";\n\nexport const projects: Props[] = [\n  {\n    message:\n      \"The goal of this project is to teach a robot to manipulate different soft objects e.g. fold different cloths in simulation and in the real world. The learning algorithm is based on Reinforcement Learning and the perception system uses Computer Vision. The main technologies used include PyTorch, MuJoCo, and ROS.\",\n    title: \"Robotic soft object manipulation\",\n    mediaType: \"image\",\n    projectLink: \"https://github.com/hietalajulius/cloth-manipulation\",\n    mediaLink:\n      \"https://github.com/hietalajulius/cloth-manipulation/blob/master/cover.png?raw=true\",\n    time: \"2020 - Present\",\n    imageFit: \"cover\",\n  },\n  {\n    message:\n      \"We used a variant of the Word2vec algorithm to learn word embeddings that were then used in an downstream NLP sentiment analysis task to identify the sentiment in Tweets. The project was done in python and we utlized libraries like gensim and PyTorch for learning the embeddings and the sentiment classifier.\",\n    title: \"Word2vec NLP\",\n    mediaType: \"image\",\n    projectLink: \"https://github.com/hietalajulius/word-2-vec-nlp\",\n    mediaLink:\n      \"https://github.com/hietalajulius/word-2-vec-nlp/raw/master/cover.png?raw=true\",\n    time: \"2020\",\n    imageFit: \"cover\",\n  },\n  {\n    message:\n      \"This project utilizes Reinforcement Learning (Policy gradient) to teach an agent to play the game of Pong against an opponent by only observing the pixels from the environment. The pixels were processes using Computer Vision. The main technologies utlized inlude PyTorch and OpenAI Gym.\",\n    title: \"Pong from Pixels\",\n    mediaType: \"image\",\n    projectLink: \"https://github.com/hietalajulius/pong-from-pixels\",\n    mediaLink:\n      \"https://camo.githubusercontent.com/8f138ea8c2ed28441393ac3f26a626cf3f8df923591536dcee11002ea93363b4/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f51764670697a736d61583673664b533378372f67697068792e676966\",\n    time: \"2019\",\n    imageFit: \"contain\",\n  },\n  {\n    message:\n      \"This work was done as part of the Junction 2019 hackathon, where we created a tool to recommend recipes to users based on their existing ingredients, preferences, and store availability etc. The recommendation engine is based on a recurrent neural network (RNN) and it was implemented in PyTorch from scratch.\",\n    title: \"Food recipe recommender\",\n    mediaType: \"image\",\n    projectLink: \"https://github.com/hietalajulius/k-ruoka-recipes\",\n    mediaLink:\n      \"https://github.com/hietalajulius/k-ruoka-recipes/raw/master/cover.gif?raw=true\",\n    time: \"2019\",\n    imageFit: \"contain\",\n  },\n  {\n    message:\n      \"Done as a part of the Junction Stupid Hack 2019. We created a text classifier that goes through different Wikipedia articles and classifies them as good or bad based on the first couple of sentences. The classifiers is based on a custom recurrent neural network model implemented in PyTorch.\",\n    title: \"NLP text classifier\",\n    mediaType: \"image\",\n    projectLink: \"https://github.com/hietalajulius/stupid-hack-2019\",\n    mediaLink:\n      \"https://github.com/hietalajulius/stupid-hack-2019/raw/master/cover.gif\",\n    time: \"2019\",\n    imageFit: \"contain\",\n  },\n];\n","import { deepFreeze } from \"grommet/utils\";\n\nexport const customTheme = deepFreeze({\n  global: {\n    colors: {\n      brand: \"#FFCA58\",\n      \"accent-1\": \"#FFFFFF\",\n    },\n    font: {\n      size: \"18px\",\n      height: \"24px\",\n      maxWidth: \"432px\",\n      family: \"Poppins\",\n      face:\n        '\\n        @font-face {\\n          font-family: \"Metric\";\\n          src: url(\"https://hpefonts.s3.amazonaws.com/web/MetricHPE-Web-Regular.woff\") format(\\'woff\\');\\n        }\\n\\n        @font-face {\\n          font-family: \"Metric\";\\n          src: url(\"https://hpefonts.s3.amazonaws.com/web/MetricHPE-Web-Bold.woff\") format(\\'woff\\');\\n          font-weight: 700;\\n        }\\n\\n        @font-face {\\n          font-family: \"Metric\";\\n          src: url(\"https://hpefonts.s3.amazonaws.com/web/MetricHPE-Web-Semibold.woff\") format(\\'woff\\');\\n          font-weight: 600;\\n        }\\n\\n        @font-face {\\n          font-family: \"Metric\";\\n          src: url(\"https://hpefonts.s3.amazonaws.com/web/MetricHPE-Web-Light.woff\") format(\\'woff\\');\\n          font-weight: 100;\\n        }\\n      ',\n    },\n  },\n});\n","import {\n  Main,\n  Heading,\n  Box,\n  Button,\n  Footer,\n  Text,\n  Avatar,\n  Image,\n  Anchor,\n  Grommet,\n} from \"grommet\";\nimport React from \"react\";\nimport Toggle from \"react-toggle\";\nimport { Star } from \"grommet-icons\";\nimport \"./App.css\";\nimport { Project } from \"./Card\";\nimport { projects } from \"./projects\";\nimport { customTheme } from \"./theme\";\nimport { BiSun } from \"react-icons/bi\";\n\ndocument.title = \"Julius Hietala\";\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = React.useState({\n    width: 0,\n    height: 0,\n  });\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    handleResize();\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowSize;\n};\n\nconst App = () => {\n  const [darkMode, setDarkMode] = React.useState(true);\n  const size = useWindowSize();\n\n\n  const renderCards = () =>\n    projects.map((project) => {\n      return (\n        <Box>\n          <Project mobile={size.width < 620} textColor={textColor} {...project} />\n        </Box>\n      );\n    });\n\n  const onToggle = () => {\n    setDarkMode(!darkMode);\n    const href = (document.getElementById(\"favicon\") as any).href;\n    if (darkMode) {\n      (document.getElementById(\"favicon\") as any).href = href.replace(\n        \"moon\",\n        \"sun\"\n      );\n    } else {\n      (document.getElementById(\"favicon\") as any).href = href.replace(\n        \"sun\",\n        \"moon\"\n      );\n    }\n  };\n  const textColor = darkMode ? \"white\" : \"black\";\n  return (\n    <Grommet\n      background={\n        darkMode\n          ? \"linear-gradient(to top, #355c7d, #6c5b7b, #c06c84)\"\n          : \"white\"\n      }\n      themeMode={darkMode ? \"dark\" : \"light\"}\n      theme={customTheme}\n    >\n      <Main pad=\"10px\" align=\"center\" direction=\"column\">\n        <Box\n          pad={{ top: \"20px\" }}\n          direction=\"row\"\n          width=\"large\"\n          justify=\"between\"\n        >\n          <Box\n            animation={{\n              type: \"pulse\",\n              duration: 1000,\n              size: \"medium\",\n            }}\n          >\n            <Toggle\n              checked={darkMode}\n              icons={{\n                unchecked: <Star color={\"yellow\"} size={\"small\"} />,\n                checked: <BiSun size=\"14px\" />,\n              }}\n              onChange={onToggle}\n            />\n          </Box>\n          <Box gap=\"small\" direction=\"row\">\n            <Button\n              primary\n              label=\"Github\"\n              href={\"https://github.com/hietalajulius\"}\n            />\n            <Button\n              primary\n              label=\"LinkedIn\"\n              href={\"https://www.linkedin.com/in/julius-hietala-8967b8a2/\"}\n            />\n          </Box>\n        </Box>\n        <Box align=\"center\">\n          <Box>\n            <Heading size={\"small\"} color={textColor} level={1}>\n              <Box gap=\"small\" direction=\"column\">\n                <Box align=\"center\">\n                  <Avatar size=\"xlarge\">\n                    <Image\n                      fit=\"contain\"\n                      src=\"https://avatars3.githubusercontent.com/u/4254623?s=460&u=2929eada3a32281e89b5438075f3faefe53aaa13&v=4\"\n                    />\n                  </Avatar>\n                </Box>\n                <Box>{\"Julius Hietala\"}</Box>\n              </Box>\n            </Heading>\n          </Box>\n          <Box width=\"large\">\n            <Text color={textColor}>\n              Hello! I'm currently working as a software engineer for{\" \"}\n              {<Anchor href=\"smartly.io \">Smartly.io</Anchor>} and doing\n              robotics research at the{\" \"}\n              {\n                <Anchor href=\"https://irobotics.aalto.fi/research/\">\n                  Intelligent Robotics Group\n                </Anchor>\n              }{\" \"}\n              at{\" \"}\n              <Anchor href=\"https://www.aalto.fi/en\">Aalto University</Anchor>.\n              My main interests are in practical applications of Machine\n              Learning, currently focusing on robotics and reinforcement\n              learning.\n            </Text>\n          </Box>\n          <Heading size={\"small\"} color={textColor} level={2}>\n            {\"Things I've been working on lately\"}\n          </Heading>\n        </Box>\n        {renderCards()}\n      </Main>\n      <Footer pad={{ horizontal: \"small\", vertical: \"small\" }}>\n        <Box align=\"start\" direction=\"row\" gap=\"xsmall\">\n          <Text size=\"small\">Made with</Text>\n          <Anchor size=\"small\" href=\"https://www.typescriptlang.org/\">\n            TypeScript\n          </Anchor>\n          <Text size=\"small\">and</Text>\n          <Anchor size=\"small\" href=\"https://v2.grommet.io/\">\n            grommet\n          </Anchor>\n        </Box>\n\n        <Text textAlign=\"center\" size=\"small\">\n          © 2020 Copyright\n        </Text>\n      </Footer>\n    </Grommet>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}